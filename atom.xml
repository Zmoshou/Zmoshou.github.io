<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Moshou</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-23T08:55:13.795Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Moshou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3动画</title>
    <link href="http://yoursite.com/2019/01/03/CSS3%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2019/01/03/CSS3动画/</id>
    <published>2019-01-03T12:12:21.000Z</published>
    <updated>2020-01-23T08:55:13.795Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS3动画"><a href="#CSS3动画" class="headerlink" title="CSS3动画"></a>CSS3动画</h2><p>通过 CSS3，我们能够创建动画，这可以在许多网页中取代动画图片、Flash 动画以及 JavaScript。</p><p>###1.CSS3的@keyframes 规则</p><p>@keyframes 规则用于创建动画。在 @keyframes 中规定某项 CSS 样式，就能创建由当前样式逐渐改为新样式的动画效果。</p><p>@keyframes 中创建动画时，请把它捆绑到某个选择器，否则不会产生动画效果。通过规定至少以下两项 CSS3 动画属性，即可将动画绑定到选择器：</p><ul><li>规定动画的名称</li><li>规定动画的时长</li></ul><h3 id="2-CSS3-中动画的使用"><a href="#2-CSS3-中动画的使用" class="headerlink" title="2.CSS3 中动画的使用"></a>2.CSS3 中动画的使用</h3><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。</p><p>您可以改变任意多的样式任意多的次数。</p><p>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</p><p>0% 是动画的开始，100% 是动画的完成。</p><p>为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><p>动画是使元素从一种样式逐渐变化为另一种样式的效果。</p><p>您可以改变任意多的样式任意多的次数。</p><p>请用百分比来规定变化发生的时间，或用关键词 “from” 和 “to”，等同于 0% 和 100%。</p><p>0% 是动画的开始，100% 是动画的完成。</p><p>为了得到最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;style&gt; </span><br><span class="line">div</span><br><span class="line">&#123;</span><br><span class="line">width:100px;</span><br><span class="line">height:100px;</span><br><span class="line">background:red;</span><br><span class="line">animation:myfirst 5s;</span><br><span class="line">-moz-animation:myfirst 5s; /* Firefox */</span><br><span class="line">-webkit-animation:myfirst 5s; /* Safari and Chrome */</span><br><span class="line">-o-animation:myfirst 5s; /* Opera */</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes myfirst</span><br><span class="line">&#123;</span><br><span class="line">from &#123;background:red;&#125;</span><br><span class="line">to &#123;background:yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-moz-keyframes myfirst /* Firefox */</span><br><span class="line">&#123;</span><br><span class="line">from &#123;background:red;&#125;</span><br><span class="line">to &#123;background:yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-webkit-keyframes myfirst /* Safari and Chrome */</span><br><span class="line">&#123;</span><br><span class="line">from &#123;background:red;&#125;</span><br><span class="line">to &#123;background:yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@-o-keyframes myfirst /* Opera */</span><br><span class="line">&#123;</span><br><span class="line">from &#123;background:red;&#125;</span><br><span class="line">to &#123;background:yellow;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&lt;b&gt;注释：&lt;/b&gt;本例在 Internet Explorer 中无效。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="3-CSS3-动画属性"><a href="#3-CSS3-动画属性" class="headerlink" title="3.CSS3 动画属性"></a>3.CSS3 动画属性</h3><ul><li><p>animation (所有动画属性的简写属性，除了 animation-play-state 属性)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">animation: name duration timing-function delay iteration-count direction;</span><br><span class="line">animation: demo 3s liner 0.2 iteration-count direction;</span><br></pre></td></tr></table></figure></li><li><p>animation-name(为 @keyframes 动画指定名称)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-name: keyframename|none;</span><br></pre></td></tr></table></figure></li><li><p>animation-duration(定义动画完成一个周期需要多少秒或毫秒)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-duration: time;</span><br></pre></td></tr></table></figure></li><li><p>animation-timing-function(指定动画将如何完成一个周期）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">animation-timing-function: value;</span><br><span class="line"></span><br><span class="line">linear动画从头到尾的速度是相同的。</span><br><span class="line">ease默认。动画以低速开始，然后加快，在结束前变慢。</span><br><span class="line">ease-in动画以低速开始。</span><br><span class="line">ease-out动画以低速结束。</span><br><span class="line">ease-in-out动画以低速开始和结束。</span><br><span class="line">cubic-bezier(n,n,n,n)在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</span><br></pre></td></tr></table></figure></li><li><p>animation-delay (定义动画什么时候开始)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">animation-delay: time;</span><br></pre></td></tr></table></figure></li><li><p>animation-iteration-count(定义动画应该播放多少次)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">animation-iteration-count: value;</span><br><span class="line"></span><br><span class="line">n一个数字，定义应该播放多少次动画</span><br><span class="line">infinite指定动画应该播放无限次（永远）</span><br></pre></td></tr></table></figure></li><li><p>animation-direction (定义是否循环交替反向播放动画)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">animation-direction: normal|reverse|alternate|alternate-reverse|initial|inherit;</span><br><span class="line"></span><br><span class="line">normal默认值。动画按正常播放。</span><br><span class="line">reverse动画反向播放。</span><br><span class="line">alternate动画在奇数次（1、3、5...）正向播放，在偶数次（2、4、6...）反向播放。</span><br><span class="line">alternate-reverse 动画在奇数次（1、3、5...）反向播放，在偶数次（2、4、6...）正向播放。</span><br><span class="line">initial设置该属性为它的默认值。</span><br><span class="line">inherit从父元素继承该属性。</span><br></pre></td></tr></table></figure></li><li><p>animation–play-state(指定动画是否正在运行或已暂停)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">animation-play-state: paused|running;</span><br><span class="line"></span><br><span class="line">paused指定暂停动画</span><br><span class="line">running指定正在运行的动画</span><br></pre></td></tr></table></figure><p>​</p></li></ul>]]></content>
    
    <summary type="html">
    
      CSS3动画
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
      <category term="动画" scheme="http://yoursite.com/tags/%E5%8A%A8%E7%94%BB/"/>
    
  </entry>
  
  <entry>
    <title>前端兼容性问题小结</title>
    <link href="http://yoursite.com/2018/12/21/%E5%89%8D%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2018/12/21/前端兼容性问题小结/</id>
    <published>2018-12-21T12:45:30.000Z</published>
    <updated>2020-01-23T07:19:12.341Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端兼容性问题小结"><a href="#前端兼容性问题小结" class="headerlink" title="前端兼容性问题小结"></a>前端兼容性问题小结</h2><h3 id="1-不同浏览器的标签默认的外补丁和内补丁不同"><a href="#1-不同浏览器的标签默认的外补丁和内补丁不同" class="headerlink" title="1.不同浏览器的标签默认的外补丁和内补丁不同"></a>1.不同浏览器的标签默认的外补丁和内补丁不同</h3><p>问题症状：随便写几个标签，不加样式控制的情况下，各自的margin 和padding差异较大。</p><p>碰到频率:100%</p><p>解决方案：CSS里    *{margin:0;padding:0;}，或使用第三方css文件重置。</p><p>备注：这个是最常见的也是最易解决的一个浏览器兼容性问题，几乎所有的CSS文件开头都会用通配符*来设置各个标签的内外补丁是0。</p><h3 id="2-图片默认有间距"><a href="#2-图片默认有间距" class="headerlink" title="2.图片默认有间距"></a>2.图片默认有间距</h3><p>问题症状：几个img标签放在一起的时候，有些浏览器会有默认的间距，加了问题一中提到的通配符也不起作用。</p><p>碰到几率：20%</p><p>解决方案：使用float属性为img布局</p><p>备注：因为img标签是行内属性标签，所以只要不超出容器宽度，img标签都会排在一行里，但是部分浏览器的img标签之间会有个间距。去掉这个间距使用float是正道。（我的一个学生使用负margin，虽然能解决，但负margin本身就是容易引起浏览器兼容问题的用法，所以我禁止他们使用）</p><p>###3.IE9一下浏览器不能使用opacity</p><p>解决方案：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">opacity: 0.5;</span><br><span class="line">filter:alpha(opacity = 50);</span><br><span class="line">filter: progid:DXImageTransform.Microsoft.Alpha(style = 0, opacity = 50);</span><br></pre></td></tr></table></figure><h3 id="4-IE6-背景闪烁的问题"><a href="#4-IE6-背景闪烁的问题" class="headerlink" title="4.IE6 背景闪烁的问题"></a>4.IE6 背景闪烁的问题</h3><p>问题：链接、按钮用 <code>CSSsprites</code> 作为背景，在 <code>ie6</code> 下会有背景图闪烁的现象。原因是 <code>IE6</code> 没有将背景图缓存，每次触发 <code>hover</code> 的时候都会重新加载</p><p>解决：可以用 <code>JavaScript</code> 设置 <code>ie6</code> 缓存这些图片：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.execCommand(&quot;BackgroundImageCache&quot;, false, true);</span><br></pre></td></tr></table></figure><h3 id="5-键盘事件-keyCode-兼容性写法"><a href="#5-键盘事件-keyCode-兼容性写法" class="headerlink" title="5.键盘事件 keyCode 兼容性写法"></a>5.键盘事件 <code>keyCode</code> 兼容性写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var inp = document.getElementById(&apos;inp&apos;)</span><br><span class="line">var result = document.getElementById(&apos;result&apos;)</span><br><span class="line"></span><br><span class="line">function getKeyCode(e) &#123;</span><br><span class="line">  e = e ? e : (window.event ? window.event : &quot;&quot;)</span><br><span class="line">  return e.keyCode ? e.keyCode : e.which</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inp.onkeypress = function(e) &#123;</span><br><span class="line">  result.innerHTML = getKeyCode(e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-DOM-事件处理程序的兼容写法"><a href="#6-DOM-事件处理程序的兼容写法" class="headerlink" title="6.DOM 事件处理程序的兼容写法"></a>6.DOM 事件处理程序的兼容写法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">var eventshiv = &#123;</span><br><span class="line">    // event兼容</span><br><span class="line">    getEvent: function(event) &#123;</span><br><span class="line">        return event ? event : window.event;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">// &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;兼容</span><br><span class="line">getType: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(event) &#123;</span><br><span class="line">    &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; event.type;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// target兼容</span><br><span class="line">getTarget: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(event) &#123;</span><br><span class="line">    &lt;span class=&quot;hljs-built_in&quot;&gt;return&lt;/span&gt; event.target ? event.target : event.srcelem;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 添加事件句柄</span><br><span class="line">addHandler: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(elem, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, listener) &#123;</span><br><span class="line">    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (elem.addEventListener) &#123;</span><br><span class="line">        elem.addEventListener(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, listener, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);</span><br><span class="line">    &#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (elem.attachEvent) &#123;</span><br><span class="line">        elem.attachEvent(&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, listener);</span><br><span class="line">    &#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &#123;</span><br><span class="line">        // 在这里由于.与&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt;字符串不能链接，只能用 []</span><br><span class="line">        elem[&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;] = listener;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 移除事件句柄</span><br><span class="line">removeHandler: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(elem, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, listener) &#123;</span><br><span class="line">    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (elem.removeEventListener) &#123;</span><br><span class="line">        elem.removeEventListener(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, listener, &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;);</span><br><span class="line">    &#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (elem.detachEvent) &#123;</span><br><span class="line">        elem.detachEvent(&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, listener);</span><br><span class="line">    &#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &#123;</span><br><span class="line">        elem[&lt;span class=&quot;hljs-string&quot;&gt;&apos;on&apos;&lt;/span&gt; + &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;] = null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 添加事件代理</span><br><span class="line">addAgent: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (elem, &lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, agent, listener) &#123;</span><br><span class="line">    elem.addEventListener(&lt;span class=&quot;hljs-built_in&quot;&gt;type&lt;/span&gt;, &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt; (e) &#123;</span><br><span class="line">        &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (e.target.matches(agent)) &#123;</span><br><span class="line">            listener.call(e.target, e); // this 指向 e.target</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 取消默认行为</span><br><span class="line">preventDefault: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(event) &#123;</span><br><span class="line">    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (event.preventDefault) &#123;</span><br><span class="line">        event.preventDefault();</span><br><span class="line">    &#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &#123;</span><br><span class="line">        event.returnValue = &lt;span class=&quot;hljs-literal&quot;&gt;false&lt;/span&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 阻止事件冒泡</span><br><span class="line">stopPropagation: &lt;span class=&quot;hljs-keyword&quot;&gt;function&lt;/span&gt;(event) &#123;</span><br><span class="line">    &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (event.stopPropagation) &#123;</span><br><span class="line">        event.stopPropagation();</span><br><span class="line">    &#125; &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; &#123;</span><br><span class="line">        event.cancelBubble = &lt;span class=&quot;hljs-literal&quot;&gt;true&lt;/span&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      前端兼容性问题小结
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="兼容性" scheme="http://yoursite.com/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>css知识点小结(2)</title>
    <link href="http://yoursite.com/2018/12/13/css%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93-2/"/>
    <id>http://yoursite.com/2018/12/13/css知识点小结-2/</id>
    <published>2018-12-13T12:42:33.000Z</published>
    <updated>2020-01-23T06:01:48.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css知识点小结-2"><a href="#css知识点小结-2" class="headerlink" title="css知识点小结(2)"></a>css知识点小结(2)</h2><h3 id="1-文本超出部分显示省略号"><a href="#1-文本超出部分显示省略号" class="headerlink" title="1.文本超出部分显示省略号"></a>1.文本超出部分显示省略号</h3><p>单行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">overflow:hidden；</span><br><span class="line">text-overflow:ellipsis;</span><br><span class="line">white-space:nowarp;</span><br></pre></td></tr></table></figure><p>多行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: 3; // 最多显示几行</span><br><span class="line">overflow: hidden;</span><br></pre></td></tr></table></figure><p>###2.优雅降级和渐进增强</p><p><strong>优雅降级：</strong></p><ul><li>Web站点在所有新式浏览器中都能正常工作，如果用户使用的是老式浏览器，则代码会针对旧版本的IE进行降级处理了,使之在旧式浏览器上以某种形式降级体验却不至于完全不能用。</li></ul><p><strong>渐进增强：</strong></p><ul><li><p>从被所有浏览器支持的基本功能开始，逐步地添加那些只有新版本浏览器才支持的功能,向页面增加不影响基础浏览器的额外样式和功能的。当浏览器支持时，它们会自动地呈现出来并发挥作用。</p><p>如：默认使用flash上传，但如果浏览器支持 HTML5 的文件上传功能，则使用HTML5实现更好的体验；</p></li></ul><h3 id="3-transition和animation的区别"><a href="#3-transition和animation的区别" class="headerlink" title="3.transition和animation的区别"></a>3.transition和animation的区别</h3><ul><li>transition是过渡动画，animation是帧动画。</li><li>transition只能从一种状态过渡到另外一种状态，animation可以定制复杂动画(多个帧)，可以定义动画的区间等。</li><li>transition必须通过一些行为才能触发（js或者伪类来触发），animation的话直接就可以触发。</li></ul><h3 id="4-margin-left-calc-100-100px-代码中calc（）作用"><a href="#4-margin-left-calc-100-100px-代码中calc（）作用" class="headerlink" title="4.margin-left:calc(-100%-100px) 代码中calc（）作用"></a>4.margin-left:calc(-100%-100px) 代码中calc（）作用</h3><ul><li>通过计算来确定CSS属性值。</li><li>calc是英文单词calculate(计算)的缩写，是css3的一个新增的功能，你可以使用calc()给元素的border、margin、pading、font-size和width等属性设置动态值。calc()可以使用数学运算中的简单加（+）、减（-）、乘（）和除（/）来解决问题，而且还可以根据单位如px,em,rem和百分比来转化计算</li></ul><h3 id="5-Sass、Less的区别？"><a href="#5-Sass、Less的区别？" class="headerlink" title="5. Sass、Less的区别？"></a>5. Sass、Less的区别？</h3><p>CSS 预处理，他们是动态的样式语言。他们规定了一种特殊的语法并且内置了编译器，可以将less/sass写的代码通过编译器编译成 CSS。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Less和Sass的区别：</span><br><span class="line">1.变量符不一样，less 是@，而 Sass 是$;</span><br><span class="line">2.Sass支持条件语句，可以使用 if&#123;&#125;else&#123;&#125;,for&#123;&#125;循环等等。而 Less 不支持;</span><br><span class="line">3.Sass是基于Ruby，需要在服务端处理的；而Less是在客户端处理，需要引入less.js</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      css知识点小结
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>css知识点小结(1)</title>
    <link href="http://yoursite.com/2018/12/02/css%E7%9F%A5%E8%AF%86%E7%82%B9%E5%B0%8F%E7%BB%93-1/"/>
    <id>http://yoursite.com/2018/12/02/css知识点小结-1/</id>
    <published>2018-12-02T11:30:10.000Z</published>
    <updated>2020-01-21T14:23:45.455Z</updated>
    
    <content type="html"><![CDATA[<h2 id="css知识点小结-1"><a href="#css知识点小结-1" class="headerlink" title="css知识点小结(1)"></a>css知识点小结(1)</h2><h3 id="1-css选择器优先级"><a href="#1-css选择器优先级" class="headerlink" title="1.css选择器优先级"></a>1.css选择器优先级</h3><p><strong>选择器的特殊性值表述为4个部分，用0,0,0,0表示，权重计算规则如下：</strong></p><ul><li>行间样式        1,0,0,0</li><li>ID选择器         0,1,0,0</li><li>类选择器、属性选择器或伪类     0,0,1,0</li><li>元素和伪元素    0,0,0,1</li></ul><p>最后比较特殊的一个标志<strong>!important</strong>（权重），它没有特殊性值，但它的优先级是<strong>最高的</strong></p><h3 id="2块格式化上下文（Block-Formatting-Context）及其工作原理"><a href="#2块格式化上下文（Block-Formatting-Context）及其工作原理" class="headerlink" title="2块格式化上下文（Block Formatting Context）及其工作原理"></a>2块格式化上下文（Block Formatting Context）及其工作原理</h3><p><strong>块格式上下文（BFC）是它是一个独立的渲染区域，容器里面的子元素不会影响到外面的元素。</strong></p><p>BFC特性</p><ol><li>在BFC中，盒子从顶端开始垂直地一个接一个地排列。</li><li>盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠。</li><li>在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</li><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。</li><li>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</li></ol><p><strong>如何触发BFC</strong></p><ul><li><code>float</code>的值不是<code>none</code>.</li><li><code>position</code>的值不是<code>static</code>或<code>relative</code>.</li><li><code>display</code>的值是<code>table-cell</code>、<code>table-caption</code>、<code>inline-block</code>、<code>flex</code>、或<code>inline-flex</code>。</li><li><code>overflow</code>的值不是<code>visible</code>。</li></ul><h3 id="3-如何清除浮动"><a href="#3-如何清除浮动" class="headerlink" title="3.如何清除浮动"></a>3.如何清除浮动</h3><ul><li>空div方法，在父盒子最后加一个空盒子并且加上clear:both<code>&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;</code></li><li>伪元素法，使用伪元素定义一个clearfix的样式类，然后使用<code>&lt;div class=&quot;clearfix&quot;&gt;</code></li><li>给父亲设置<code>overflow: auto</code>或<code>overflow: hidden</code>等方法（触发BFC）。</li><li>给父元素指定高度。</li></ul><h3 id="4-外边距重叠（外边距坍塌）"><a href="#4-外边距重叠（外边距坍塌）" class="headerlink" title="4.外边距重叠（外边距坍塌）"></a>4.外边距重叠（外边距坍塌）</h3><p><strong>在 CSS 当中，相邻的两个盒子（可能是兄弟关系也可能是祖先关系）的外边距可以结合成一个单独的外边距。这种合并外边距的方式被称为折叠，并且因而所结合成的外边距称为折叠外边距。</strong></p><p>折叠结果遵循下列计算规则：</p><ol><li>两个相邻的外边距都是正数时，折叠结果是它们两者之间较大的值。</li><li>两个相邻的外边距都是负数时，折叠结果是两者绝对值的较大值。</li><li>两个外边距一正一负时，折叠结果是两者的相加的和。</li></ol><h3 id="5-伪元素及其使用"><a href="#5-伪元素及其使用" class="headerlink" title="5.伪元素及其使用"></a>5.伪元素及其使用</h3><p><strong>伪元素指的是两个冒号的选择器   div::before   div::after    p::first-letter</strong></p><p>伪元素的用途：</p><p>1.用after清除浮动</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="clear-fix"&gt;</span><br><span class="line">   &lt;div&gt; &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">    <span class="selector-tag">clear-fix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">        <span class="attribute">clear</span>: both;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用伪类实现简单图标</li><li>元素 hover 特效</li></ol><h3 id="6-flex布局中的属性"><a href="#6-flex布局中的属性" class="headerlink" title="6.flex布局中的属性"></a>6.flex布局中的属性</h3><p>在容器上可以设置6个属性：</p><ul><li>flex-direction    主轴方向</li><li>flex-wrap         主轴超出范围是否换行</li><li>flex-flow         flex-direction和flex-wrap的复合属性</li><li>justify-content   元素在主轴的对齐方式</li><li>align-items       元素在侧轴的对齐方式</li><li>align-content     元素在侧轴的对齐方式（多行）</li></ul><p>注意：当设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</p><p>Flex 有六种属性可运用在 item 项目上:</p><ol><li>order            flex-item的排序</li><li>flex-basis       flex-item的宽度</li><li>flex-grow        flex-item占据剩余空间的比例</li><li>flex-shrink      flex-item占据收缩空间的比例</li><li>flex             flex-grow\flex-shrink\flex-basis的复合属性</li><li>align-self       规定flex-item自己的对齐方式</li></ol><h3 id="7-行内元素、块级元素"><a href="#7-行内元素、块级元素" class="headerlink" title="7.行内元素、块级元素"></a>7.行内元素、块级元素</h3><p>行内元素：在一行显示，不可以设置宽高。代表  span   a   input   select  strong</p><p>块级元素：换行显示，可以设置宽高。代表  div  dl  dd  dt  form   p   table  tr  th  td</p><p>行内块级元素：在一行显示，可以设置宽高。代表 img  input</p><h3 id="8-水平垂直居中的方式"><a href="#8-水平垂直居中的方式" class="headerlink" title="8.水平垂直居中的方式"></a>8.水平垂直居中的方式</h3><ol><li>flex布局</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">display: flex;</span><br><span class="line">justify-content: center;</span><br><span class="line">align-items: center;</span><br></pre></td></tr></table></figure><ol start="2"><li>position定位</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 父容器</span><br><span class="line">position: relative;</span><br><span class="line"></span><br><span class="line">// 子容器</span><br><span class="line">position:absolute;</span><br><span class="line">margin:auto;</span><br><span class="line">top:0;</span><br><span class="line">bottom:0;</span><br><span class="line">left:0;</span><br><span class="line">right:0;</span><br></pre></td></tr></table></figure><ol start="3"><li>position+transform</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 父容器</span><br><span class="line">position: relative;</span><br><span class="line"></span><br><span class="line">// 子容器</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">transform: translate(-50%, -50%);</span><br></pre></td></tr></table></figure><ol start="4"><li>position+margin</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 父容器</span><br><span class="line">position: relative;</span><br><span class="line"></span><br><span class="line">// 子容器</span><br><span class="line">height: 50px;</span><br><span class="line">background-color: #21252b;</span><br><span class="line">position: absolute;</span><br><span class="line">margin: auto;</span><br><span class="line">top: 50%;</span><br><span class="line">left: 50%;</span><br><span class="line">margin-left: -25px;</span><br><span class="line">margin-top: -25px;</span><br></pre></td></tr></table></figure><h3 id="9-CSS中link和-import的区别"><a href="#9-CSS中link和-import的区别" class="headerlink" title="9.CSS中link和@import的区别"></a>9.CSS中link和@import的区别</h3><ul><li>link属于HTML标签，而@import是CSS提供的</li><li>页面加载时，link会同时被加载，而@import引用的CSS会等到页面加载完毕后再加载</li><li>import只在IE5以上被识别，存在兼容性问题，link无兼容性问题</li><li>link方式的样式的权重高于@import的权重</li></ul><h3 id="10-CSS的常用选择器"><a href="#10-CSS的常用选择器" class="headerlink" title="10.CSS的常用选择器"></a>10.CSS的常用选择器</h3><p>1.id选择器（#box）<br>2.类选择器（.box）<br>3.标签选择器（div）<br>4.相邻选择器（h1+p）<br>5.子选择器（ul&gt;li）<br>6.后代选择器（li  a）<br>7.通配符选择器（*）<br>8.属性选择器（a[attr=”d1”]）<br>9.伪类选择器（a:hover, li:nth-child）</p>]]></content>
    
    <summary type="html">
    
      css知识点小结
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>html知识点小结</title>
    <link href="http://yoursite.com/2018/11/25/html%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/11/25/html知识点总结/</id>
    <published>2018-11-25T12:15:50.000Z</published>
    <updated>2020-01-21T11:38:17.418Z</updated>
    
    <content type="html"><![CDATA[<h2 id="html知识点小结"><a href="#html知识点小结" class="headerlink" title="html知识点小结##"></a>html知识点小结##</h2><h3 id="1-语义化标签"><a href="#1-语义化标签" class="headerlink" title="1.语义化标签"></a>1.语义化标签</h3><p>简单的来说就是用正确的标签做正确的事情。</p><p>优点：</p><ul><li>见名知意，可读性好，方便代码的开发和维护。</li><li>有利于SEO，搜索引擎根据标签来确定上下文和各个关键字的权重。</li><li>方便其他设备解析，如盲人阅读器根据语义渲染网页</li></ul><h3 id="2-CSS-的-lt-link-gt-标签放在-lt-head-gt-lt-head-gt-之间？-JS-的-lt-script-gt-标签放在-lt-body-gt-之前"><a href="#2-CSS-的-lt-link-gt-标签放在-lt-head-gt-lt-head-gt-之间？-JS-的-lt-script-gt-标签放在-lt-body-gt-之前" class="headerlink" title="2. CSS 的&lt;link&gt;标签放在&lt;head&gt;&lt;/head&gt;之间？ JS 的&lt;script&gt;标签放在&lt;/body&gt;之前"></a>2. CSS 的<code>&lt;link&gt;</code>标签放在<code>&lt;head&gt;&lt;/head&gt;</code>之间？ JS 的<code>&lt;script&gt;</code>标签放在<code>&lt;/body&gt;</code>之前</h3><ul><li><p>把<code>&lt;link&gt;</code>放在 <code>&lt;head&gt;</code>中</p><p>这种做法可以让页面逐步呈现，提高了用户体验。如果将样式表放在文档底部附近，会使许多浏览器（包括 Internet Explorer）不能逐步呈现页面。并且link会阻止页面渲染但是不会组织页面的加载。</p></li><li><p>把<code>&lt;script&gt;</code>标签恰好放在<code>&lt;/body&gt;</code>之前 </p><p>脚本在下载和执行期间会阻止 HTML 解析。把<code>&lt;script&gt;</code>标签放在底部，保证 HTML 首先完成解析，将页面尽早呈现给用户。</p></li></ul><h3 id="3-Reflow和Repaint（重绘和重排）"><a href="#3-Reflow和Repaint（重绘和重排）" class="headerlink" title="3.Reflow和Repaint（重绘和重排）"></a>3.Reflow和Repaint（重绘和重排）</h3><ul><li><p>Reflow：当涉及到DOM节点的布局属性发生变化时，就会重新计算该属性，浏览器会重新描绘相应的元素，此过程叫Reflow（回流或重排）。</p></li><li><p>Repaint：当影响DOM元素可见性的属性发生变化 (如 color) 时, 浏览器会重新描绘相应的元素, 此过程称为Repaint（重绘）。因此重排必然会引起重绘。</p><p>1- 调整窗口大小<br>2- 字体大小<br>3- 样式表变动<br>4- 元素内容变化，尤其是输入控件<br>5- CSS伪类激活，在用户交互过程中发生<br>6- DOM操作，DOM元素增删、修改<br>7- width, clientWidth, scrollTop等布局宽高的计算</p><p>Repaint和Reflow是不可避免的，只能说对性能的影响减到最小，给出下面几条建议：<br>1- 避免逐条更改样式。建议集中修改样式，例如操作className。<br>2- 避免频繁操作DOM。创建一个documentFragment或div，在它上面应用所有DOM操作，最后添加到文档里。设置      display:none的元素上操作，最后显示出来。<br>3- 避免频繁读取元素几何属性（例如scrollTop）。绝对定位具有复杂动画的元素。<br>4- 绝对定位使它脱离文档流，避免引起父元素及后续元素大量的回流</p></li></ul><h3 id="4-href和src区别"><a href="#4-href和src区别" class="headerlink" title="4.href和src区别"></a>4.href和src区别</h3><p><strong>它们之间的主要区别可以用这样一句话来概括：src用于替代这个元素，而href用于建立这个标签与外部资源之间的关系。</strong></p><ul><li>href<br>href标识超文本引用，用在link和a等元素上，href是引用和页面关联，是在当前元素和引用资源之间建立联系<br>若在文档中添加href ，浏览器会识别该文档为 CSS 文件，就会并行下载资源并且不会停止对当前文档的处理。这也是为什么建议使用 link 方式加载 CSS，而不是使用 @import 方式。</li><li>src<br>src表示引用资源，替换当前元素，用在img，script，iframe上，src是页面内容不可缺少的一部分。<br><br>当浏览器解析到src ，会暂停其他资源的下载和处理，直到将该资源加载、编译、执行完毕，图片和框架等也如此，类似于将所指向资源应用到当前内容。这也是为什么建议把 js 脚本放在底部而不是头部的原因。</li></ul><p>使用场景</p><ul><li>引用css文件时：<code>href=&quot;cssfile.css&quot;</code></li><li>引用js文件时：<code>src=&quot;myscript.js&quot;</code></li><li>引用图片：<code>src=&quot;mypic.jpg&quot;</code></li><li>网站链接：<code>href=&quot;http://www.webpage.com&quot;</code></li></ul><h3 id="5-浏览器的渲染过程"><a href="#5-浏览器的渲染过程" class="headerlink" title="5.浏览器的渲染过程"></a>5.浏览器的渲染过程</h3><ol><li>解析HTML生成DOM树。</li><li>解析CSS生成CSSOM规则树。</li><li>将DOM树与CSSOM规则树合并在一起生成渲染树。</li><li>遍历渲染树开始布局，计算每个节点的位置大小信息。</li><li>将渲染树每个节点绘制到屏幕。</li></ol><h3 id="6-doctype有什么用"><a href="#6-doctype有什么用" class="headerlink" title="6.doctype有什么用"></a>6.doctype有什么用</h3><p>DOCTYPE是document type的简写，它并不是 HTML 标签，也没有结束标签，它是一种标记语言的文档类型声明，即告诉浏览器当前 HTML 是用什么版本编写的。</p><p>1.告知浏览器文档使用哪种 HTML 或 XHTML 规范。</p><p>2.告诉浏览器按照何种规范解析页（如果你的页面没有DOCTYPE的声明，那么浏览器会进入Quirks模式）</p><h3 id="7-优化图片加载的方法"><a href="#7-优化图片加载的方法" class="headerlink" title="7.优化图片加载的方法"></a>7.优化图片加载的方法</h3><ol><li>图片懒加载。</li><li>使用icon和精灵图技术。</li><li>使用其他服务器单独存放图片。</li><li>如果图片过大，可以使用特殊编码的图片（base64编码）</li></ol><h3 id="8-常见的浏览器内核有哪些"><a href="#8-常见的浏览器内核有哪些" class="headerlink" title="8.常见的浏览器内核有哪些"></a>8.常见的浏览器内核有哪些</h3><p>Trident内核：IE,MaxThon,TT,The World,360,搜狗浏览器等。[又称MSHTML]</p><p>Gecko内核：Netscape6及以上版本，FF,MozillaSuite/SeaMonkey等</p><p>Presto内核：Opera7及以上。     [Opera内核原为：Presto，现为：Blink;]</p><p>Webkit内核：Safari,Chrome等。   [ Chrome的：Blink（WebKit的分支）]</p><h3 id="9-SEO中的TDK"><a href="#9-SEO中的TDK" class="headerlink" title="9.SEO中的TDK"></a>9.SEO中的TDK</h3><p>网页标题(title)：用于告诉用户和搜索引擎当前页面的核心内容，title是搜索引擎根据用户检索关键词进行排名的核心指标，一般标题中含有搜索的关键词才能获得较好的排名;</p><p>页面描述(description)：显示在搜索结果中，以百度为例如下图，用于告知用户网站页面的主要内容，作为引导用户点击的索引;</p><p>页面关键词(keywords)：告诉搜索引擎当前页面内容的关键词，用户无论在搜索结果还是浏览页面时都看不到页面关键词。</p><p><img src="/.com//html%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%5Ctdk.jpg" alt></p><p><img src="/.com//html%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%5Ctdk2.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      html知识点小结
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="总结" scheme="http://yoursite.com/tags/%E6%80%BB%E7%BB%93/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>First-Blog</title>
    <link href="http://yoursite.com/2018/11/12/First-Blog/"/>
    <id>http://yoursite.com/2018/11/12/First-Blog/</id>
    <published>2018-11-12T11:32:00.000Z</published>
    <updated>2020-01-19T15:27:15.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人的第一篇博客"><a href="#个人的第一篇博客" class="headerlink" title="个人的第一篇博客"></a><strong>个人的第一篇博客</strong></h1><p>今天开启了个人博客，打算记录和分享一些关于生活，学习，以及技术方面的内容，也算是一个简单的记录吧。              个人还是希望把日语继续学下去，工作中英语也很重要，还有各种前端技术，所以不能停滞不前，需要保持高度的学习状态，好好加油吧！</p>]]></content>
    
    <summary type="html">
    
      默兽的第一篇博客
    
    </summary>
    
      <category term="随想" scheme="http://yoursite.com/categories/%E9%9A%8F%E6%83%B3/"/>
    
    
      <category term="第一篇博客" scheme="http://yoursite.com/tags/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
